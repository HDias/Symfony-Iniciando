<?php

namespace HD\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

/**
 * CatalogoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements
	UserProviderInterface // Para fazer o login com usuário customizados
{
	//http://symfony.com/doc/current/cookbook/security/entity_provider.html#authenticating-someone-with-a-custom-entity-provider
	public function findOneByEmailOrPassword($user)
	{
		return $this->createQueryBuilder('u')
			->where('u.username = :username OR u.email = :email')
			->setParameter('username', $user)
			->setParameter('email', $user)
			->getQuery()
			->getOneOrNullResult(); //Verificar esse método
	}

	/**
     * {@inheritDoc}
     *
     */
    public function loadUserByUsername($username)
    {
    	try {

            $user = $this->findOneByEmailOrPassword($username);

        } catch (NoResultException $e) {
            $message = sprintf(
                'Não foi encontrado um usuário ativo para: "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    /**
     * {@inheritDoc}
     *
     */
    public function refreshUser(UserInterface $user)
    {
    	$class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    /**
     * {@inheritDoc}
     *
     */
    public function supportsClass($class)
    {
    	return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
}
